name: pr-realm-js
on: pull_request

jobs:
  build-and-test:
    name: Build and test for ${{ matrix.variant.os }} ${{ matrix.variant.arch }}
    runs-on: ${{ matrix.variant.runner }}
    env:
      npm_config_realm_local_prebuilds: ${{github.workspace}}/prebuilds
      REALM_DISABLE_SYNC_TESTS: true
    strategy:
      #fail-fast: true
      matrix:
        variant:
          - { os: linux, runner: ubuntu-latest, arch: x64, artifact-path: prebuilds, test-node: true, test-electron: true }
          - { os: windows, runner: windows-latest, arch: x64, artifact-path: prebuilds, test-node: true, test-electron: true }
          - { os: windows, runner: windows-latest, arch: ia32, artifact-path: prebuilds }
          - { os: darwin, runner: macos-latest, arch: x64, artifact-path: prebuilds, test-node: true, test-electron: true, test-react: true }
          - { os: ios, runner: macos-latest, arch: x64, artifact-path: react-native/ios/realm-js-ios.xcframework }
          - { os: android, runner: ubuntu-latest, arch: x86_64, artifact-path: build-realm-android }
          - { os: android, runner: ubuntu-latest, arch: armeabi-v7a, artifact-path: build-realm-android }
          - { os: android, runner: ubuntu-latest, arch: arm64-v8a, artifact-path: build-realm-android }
          - { os: android, runner: ubuntu-latest, arch: x86, artifact-path: build-realm-android }
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: "recursive"

      # This sets node up, and can also pick the version if necessary
      - name: Setup node version
        uses: actions/setup-node@v1

      - name: Cache prebuild artifacts
        id: cache-prebuild
        uses: actions/cache@v2
        env:
          cache-name: prebuild
        with:
          path: ${{ matrix.variant.artifact-path }}
          key: ${{ runner.os }}-${{ matrix.variant.os }}-${{ matrix.variant.arch }}-${{ env.cache-name }}-${{hashFiles('./src/**', 'vendor/**')}}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.variant.os }}-${{matrix.variant.arch}}-${{ env.cache-name }}-

      - name: MSVC Setup
        if: ${{ (matrix.variant.os == 'windows') && (steps.cache-prebuild.outputs.cache-hit != 'true') }}
        uses: ilammy/msvc-dev-cmd@v1

      - name: Windows Environment setup
        if: ${{ (matrix.variant.os == 'windows') && (steps.cache-prebuild.outputs.cache-hit != 'true') }}
        run: |
          Invoke-WebRequest -Uri https://static.realm.io/downloads/vcpkg.zip -OutFile C:\vcpkg.zip
          Expand-Archive -Path C:\vcpkg.zip -DestinationPath C:\
        shell: powershell

      # ninja-build is used by default if available and results in faster build times
      # In linux, electron requires a connected display.  We fake this by giving it a headless environment using xvfb
      # Relevant issue: https://github.com/juliangruber/browser-run/issues/147
      - name: Linux Environment setup
        if: ${{ (matrix.variant.os == 'linux') }}
        run: sudo apt-get install ninja-build xvfb

      # Install node dependencies
      - name: Prepare
        if: steps.cache-prebuild.outputs.cache-hit != 'true'
        run: npm ci --ignore-scripts

      # build the c++ library for standard targets
      - name: Build node
        if: ${{ (matrix.variant.os != 'ios') && (matrix.variant.os != 'android') && (steps.cache-prebuild.outputs.cache-hit != 'true') }}
        run: npm run build:node -- --arch=${{matrix.variant.arch}}

      # build the c++ library for IOS
      - name: Build IOS
        if: ${{ (matrix.variant.os == 'ios') && (steps.cache-prebuild.outputs.cache-hit != 'true') }}
        run: npm run build:ios

      # build the c++ library for Android
      - name: Build Android
        if: ${{ (matrix.variant.os == 'android') && (steps.cache-prebuild.outputs.cache-hit != 'true') }}
        run: npm run build:android

      - name: Install the node dependencies in the test folder
        working-directory: ./tests
        run: npm ci

      # Run the node test scripts (without sync)
      - name: Run tests
        if: ${{ (matrix.variant.test-node) }}
        working-directory: ./tests
        run: npm test

      - name: Install electron test dependencies
        if: ${{ (matrix.variant.test-electron) }}
        working-directory: ./tests/electron
        run: |
          npm ci
          npm install -S ../js

      - name: Run electron tests on non-Linux
        if: ${{ (matrix.variant.test-electron) && (matrix.variant.os != 'linux') }}
        working-directory: ./tests/electron
        run: |
          npm test -- --process=main
          npm test -- --process=render

      - name: Run electron tests on Linux
        if: ${{ (matrix.variant.test-electron) && (matrix.variant.os == 'linux') }}
        working-directory: ./tests/electron
        run: |
          xvfb-run --auto-servernum npm test -- --process=main
          xvfb-run --auto-servernum npm test -- --process=render

      - name: Run react native tests
        if: ${{ (matrix.variant.test-react) }}
        run: bash ./scripts/ci-scripts/react-tests.sh

      - name: Run react native example
        if: ${{ (matrix.variant.test-react) }}
        run: bash ./scripts/ci-scripts/realm-example.sh

      # all tests passed, upload artifacts if they were not from the cache
      - name: Upload prebuild artifact
        if: steps.cache-prebuild.outputs.cache-hit != 'true'
        uses: actions/upload-artifact@v2
        with:
          name: prebuild-${{ matrix.variant.os }}-${{ matrix.variant.arch }}
          path: ${{ matrix.variant.artifact-path }}

  test-react-native-ios:
    name: Test React Native on iOS Simulator
    runs-on: macos-latest
    if: ${{false}}
    needs: [build-and-test]
    env:
      REALM_DISABLE_SYNC_TESTS: true
    steps:
      # This will retrieve the realm-js github repository
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: "recursive"

      - name: Download darwin artifact
        uses: actions/download-artifact@v2
        with:
          name: prebuild-darwin-x64
          path: prebuilds

      - name: Download xcframework artifact
        uses: actions/download-artifact@v2
        with:
          name: prebuild-ios-x64
          path: react-native/ios/realm-js-ios.xcframework

      - name: Cache iOS build artifacts
        id: cache-ios-build
        uses: actions/cache@v2
        env:
          cache-name: cache-ios-build
        with:
          path: react-native/ios/build
          key: build-ios-${{ hashFiles('./src/**') }}
          restore-keys: |
            build-ios-

      - name: Setup environment
        run: brew install watchman

      - name: Install project dependencies
        run: npm ci

      - name: Install test dependencies
        working-directory: ./tests
        run: npm ci

      - name: Run react native tests
        run: bash ./scripts/ci-scripts/react-tests.sh

      - name: Run react native example
        run: bash ./scripts/ci-scripts/realm-example.sh

  test-react-native-android:
    name: Test React Native on Android Emulator
    runs-on: macos-latest
    if: ${{false}}
    needs: [build-and-test]
    env:
      REALM_DISABLE_SYNC_TESTS: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: "recursive"

      - name: Download prebuild artifact
        uses: actions/download-artifact@v2
        with:
          name: prebuild-darwin-x64
          path: prebuilds

      - name: Download android artifact
        uses: actions/download-artifact@v2
        with:
          name: prebuild-android-x86_64
          path: react-native/android/src/main/jniLibs

      - name: Setup environment
        run: brew install watchman

      - name: Install project dependencies
        run: npm ci

      - name: Install test dependencies
        working-directory: ./tests
        run: npm ci

      - name: run tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 28
          target: default
          arch: x86_64
          profile: Nexus 6
          script: bash ./scripts/ci-scripts/test-android.sh

  publish:
    runs-on: ubuntu-latest
    if: ${{false}}
    needs: [build-and-test, test-react-native-ios, test-react-native-android]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache js build artifacts
        uses: actions/cache@v2
        env:
          cache-name: build
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-${{ env.cache-name }}-${{hashFiles('**/package-lock.json')}}
          restore-keys: |
            ${{ runner.os }}-${{ env.cache-name }}-

      - name: Install node modules
        run: npm ci --ignore-scripts

      - name: Download linux prebuild artifact
        uses: actions/download-artifact@v2
        with:
          name: prebuild-linux-x64
          path: prebuilds

      - name: Download macos prebuild artifact
        uses: actions/download-artifact@v2
        with:
          name: prebuild-darwin-x64
          path: prebuilds

      - name: Download windows prebuild artifact
        uses: actions/download-artifact@v2
        with:
          name: prebuild-windows-x64
          path: prebuilds

      - name: Publish to Github
        run: npx prebuild --upload-all ${{ secrets.GITHUB_TOKEN }}

  baas-realm-js:
    runs-on: ubuntu-latest
    name: Deploy MDB Realm for realm js
    outputs:
      deployedApps: ${{ steps.deploy-mdb-apps.outputs.deployedApps }}
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: false

      - uses: realm/ci-actions/mdb-realm/deployApps@fe278fedebba5508c052e970fffa099de1285dff
        id: deploy-mdb-apps
        with:
          projectId: ${{ secrets.ATLAS_PROJECT_ID }}
          apiKey: ${{ secrets.ATLAS_PUBLIC_API_KEY }}
          privateApiKey: ${{ secrets.ATLAS_PRIVATE_API_KEY }}
          appsPath: ${{ github.workspace }}/Tests/TestApps
          differentiator: realm js

  cleanup-realm-js:
    runs-on: ubuntu-latest
    name: Cleanup realm js
    needs: [build-and-test, baas-realm-js]
    if: always()
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: false

      - uses: realm/ci-actions/mdb-realm/cleanup@fe278fedebba5508c052e970fffa099de1285dff
        with:
          projectId: ${{ secrets.ATLAS_PROJECT_ID }}
          apiKey: ${{ secrets.ATLAS_PUBLIC_API_KEY }}
          privateApiKey: ${{ secrets.ATLAS_PRIVATE_API_KEY }}
          differentiator: realm js
